{"version":3,"file":"index.aeba9ff7.js","sources":["../../src/pages/Main/components/Statistics/LineChart/index.tsx","../../src/mock/index.ts","../../src/pages/Main/components/Statistics/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport * as echarts from 'echarts'\r\n\r\nconst LineChart = ({ chartData }: { chartData: TLineChart }) => {\r\n  type EChartsOption = echarts.EChartsOption\r\n  let lineChart: echarts.EChartsType\r\n  const option: EChartsOption = {\r\n    xAxis: {\r\n      type: 'category',\r\n      data: chartData.xAxis\r\n    },\r\n    yAxis: {\r\n      type: 'value'\r\n    },\r\n    series: [\r\n      {\r\n        data: chartData.yAxis,\r\n        type: 'line'\r\n      }\r\n    ]\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!lineChart) {\r\n      const line = document.getElementById('line')\r\n      if (!line) return\r\n      lineChart = echarts.init(line)\r\n      lineChart.setOption(option)\r\n      lineChart.resize()\r\n    }\r\n    window.onresize = () => lineChart.resize()\r\n    return () => {\r\n      window.onresize = () => {}\r\n    }\r\n  }, [option])\r\n\r\n  return (\r\n    <>\r\n      <div id='line' style={{ height: 352 }}></div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(LineChart)\r\n","import { request } from '@utils/request'\r\nimport Mock from 'mockjs'\r\nconst baseUrl = 'https://mock.presstime.cn/mock/64424800fd89695a4d49ffa7'\r\n\r\nconst mockData = Mock.mock({\r\n  ret: true,\r\n  retCode: 0,\r\n  retMessage: '获取参数成功',\r\n  data: {\r\n    'news|5': [\r\n      {\r\n        id: '@increment( 10 )',\r\n        message: '@cparagraph(1, 3)'\r\n      }\r\n    ]\r\n  }\r\n})\r\n\r\n/**\r\n * 获取消息推送内容\r\n */\r\nconst getNews = (): Promise<TResponse> => {\r\n  return request.post(`${baseUrl}/getNews`)\r\n}\r\n\r\n/**\r\n * 获取我的应用\r\n */\r\nconst getMyAppInfo = (params: TDateRange): Promise<TResponse> => {\r\n  return request.post(`${baseUrl}/getMyAppInfo`, params)\r\n}\r\n\r\n/**\r\n * 获取我的基础服务\r\n */\r\nconst getService = (params: TDateRange): Promise<TResponse> => {\r\n  return request.post(`${baseUrl}/getService`, params)\r\n}\r\n\r\n/**\r\n * 获取调用数量统计\r\n */\r\nconst getStatistics = (params: TDateRange): Promise<TResponse> => {\r\n  return request.post(`${baseUrl}/getStatistics`, params)\r\n}\r\n\r\n/**\r\n * 获取申请类型\r\n */\r\nconst getdictionary = (params: {\r\n  typeValues: string[]\r\n}): Promise<TResponse> => {\r\n  return request.post(`${baseUrl}/getdictionary`, params)\r\n}\r\n\r\nexport {\r\n  mockData,\r\n  getNews,\r\n  getMyAppInfo,\r\n  getService,\r\n  getStatistics,\r\n  getdictionary\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Card, ConfigProvider, DatePicker } from 'antd'\r\nimport dayjs from 'dayjs'\r\nimport type { Dayjs } from 'dayjs'\r\nimport 'dayjs/locale/zh-cn'\r\nimport locale from 'antd/locale/zh_CN'\r\nimport LineChart from './LineChart'\r\nimport { rangePresets, disabledDate, dateFormat } from '@utils/date'\r\nimport { getStatistics } from '@mock/index'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst Statistics = () => {\r\n  const [dateRange, setDateRange] = useState<string[]>([\r\n    dayjs().add(-7, 'd').format(dateFormat),\r\n    dayjs().format(dateFormat)\r\n  ])\r\n  /**\r\n   * 日期范围发生变化的回调\r\n   */\r\n  const onRangeChange = (\r\n    dates: null | (Dayjs | null)[],\r\n    dateStrings: string[]\r\n  ) => {\r\n    setDateRange(dateStrings)\r\n  }\r\n\r\n  /**\r\n   * 关闭日期选择器的回调\r\n   */\r\n  const onOpenChange = (open: boolean) => {\r\n    if (!open) renderChart()\r\n  }\r\n\r\n  /**\r\n   * 图表数据\r\n   */\r\n  const [chartData, setChartData] = useState<TLineChart>()\r\n\r\n  /**\r\n   * 渲染图表\r\n   */\r\n  const renderChart = async (startTime = '', endTime = '') => {\r\n    const { data } = await getStatistics({\r\n      startTime,\r\n      endTime\r\n    })\r\n    setChartData(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    renderChart()\r\n  }, [])\r\n\r\n  return (\r\n    <Card\r\n      title='调用数量统计'\r\n      headStyle={{ borderBottom: 0 }}\r\n      bordered={false}\r\n      extra={\r\n        <ConfigProvider locale={locale}>\r\n          <RangePicker\r\n            defaultValue={[\r\n              dayjs(dateRange[0], dateFormat),\r\n              dayjs(dateRange[1], dateFormat)\r\n            ]}\r\n            presets={rangePresets}\r\n            disabledDate={disabledDate}\r\n            onChange={onRangeChange}\r\n            onOpenChange={onOpenChange}\r\n          />\r\n        </ConfigProvider>\r\n      }\r\n    >\r\n      {chartData && <LineChart chartData={chartData} />}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Statistics\r\n"],"names":["LineChart","chartData","lineChart","option","xAxis","type","data","yAxis","series","useEffect","line","document","getElementById","echarts","setOption","resize","onresize","window","_Fragment","height","LineChart$1","React","memo","baseUrl","Mock","getNews","request","getMyAppInfo","params","getService","getStatistics","RangePicker","DatePicker","Statistics","dateRange","setDateRange","useState","dayjs","add","format","dateFormat","onRangeChange","dates","dateStrings","onOpenChange","open","renderChart","setChartData","startTime","endTime","Card","borderBottom","ConfigProvider","locale","rangePresets","disabledDate","_jsx"],"mappings":"0UAGA,MAAMA,EAAY,CAAC,CAAEC,UAAAA,CAAqC,IAAM,CAE1DC,IAAAA,EACJ,MAAMC,EAAwB,CAC5BC,MAAO,CACLC,KAAM,WACNC,KAAML,EAAUG,KAClB,EACAG,MAAO,CACLF,KAAM,OACR,EACAG,OAAQ,CACN,CACEF,KAAML,EAAUM,MAChBF,KAAM,MAAA,CACP,CAAA,EAILI,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACd,GAAI,CAACP,EAAW,CACRQ,MAAAA,EAAOC,SAASC,eAAe,MAAM,EAC3C,GAAI,CAACF,EAAM,OACCG,EAAAA,EAAaH,CAAI,EAC7BR,EAAUY,UAAUX,CAAM,EAC1BD,EAAUa,OAAQ,CACpB,CACOC,cAAAA,SAAW,IAAMd,EAAUa,OAAQ,EACnC,IAAM,CACXE,OAAOD,SAAW,IAAM,CAAA,CAAC,CAC3B,EACC,CAACb,CAAM,CAAC,IAGTe,EAAA,CAAA,WACE,MAAA,CAAK,GAAG,OAAO,MAAO,CAAEC,OAAQ,GAAI,CAAA,CAAE,CAAA,CACrC,CAEP,EAEAC,EAAeC,EAAMC,KAAKtB,CAAS,ECzC7BuB,EAAU,0DAECC,EAAK,KAAK,CACzB,IAAK,GACL,QAAS,EACT,WAAY,uCACZ,KAAM,CACJ,SAAU,CACR,CACE,GAAI,mBACJ,QAAS,mBACX,CACF,CACF,CACF,CAAC,EAKD,MAAMC,EAAU,IACPC,EAAQ,KAAK,GAAGH,WAAiB,EAMpCI,EAAgBC,GACbF,EAAQ,KAAK,GAAGH,iBAAwBK,CAAM,EAMjDC,EAAcD,GACXF,EAAQ,KAAK,GAAGH,eAAsBK,CAAM,EAM/CE,EAAiBF,GACdF,EAAQ,KAAK,GAAGH,kBAAyBK,CAAM,ECjClD,CAAEG,YAAAA,CAAY,EAAIC,EAElBC,EAAa,IAAM,CACjB,KAAA,CAACC,EAAWC,CAAY,EAAIC,mBAAmB,CACnDC,EAAAA,EAAQC,IAAI,GAAI,GAAG,EAAEC,OAAOC,CAAU,EACtCH,IAAQE,OAAOC,CAAU,CAAC,CAC3B,EAIKC,EAAgB,CACpBC,EACAC,IACG,CACHR,EAAaQ,CAAW,CAAA,EAMpBC,EAAgBC,GAAkB,CACjCA,GAAmBC,GAAA,EAMpB,CAAC7C,EAAW8C,CAAY,EAAIX,EAAsB,QAAA,SAAA,EAKlDU,EAAc,MAAOE,EAAY,GAAIC,EAAU,KAAO,CACpD,KAAA,CAAE3C,KAAAA,CAAK,EAAI,MAAMwB,EAAc,CACnCkB,UAAAA,EACAC,QAAAA,CAAAA,CACD,EACDF,EAAazC,CAAI,CAAA,EAGnBG,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACDqC,GACf,EAAG,CAAE,CAAA,IAGFI,EAAI,CACH,MAAM,uCACN,UAAW,CAAEC,aAAc,CAAE,EAC7B,SAAU,GACV,QACGC,EAAc,CAAC,OAAAC,EAAe,WAC5BtB,EAAW,CACV,aAAc,CACZM,EAAMH,EAAU,GAAIM,CAAU,EAC9BH,EAAMH,EAAU,GAAIM,CAAU,CAAC,EAEjC,QAASc,EACT,aAAAC,EACA,SAAUd,EACV,aAAAG,CAAA,CAA2B,CAAA,CAGhC,EAAA,SAEA3C,GAAauD,EAACxD,EAAS,CAAC,UAAAC,CAAA,CAAqB,CAAA,CACzC,CAEX"}